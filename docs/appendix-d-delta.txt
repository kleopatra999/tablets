% Perl 6 Tablets: Appendix D - Perl 5 to Perl 6 Delta

Trends
======

The more general course of the changes is documented in the
[trends section](tablet-1-language-design.html#trends) 
of the language design tablet.


Syntactical Changes
===================

  * *use strict* and *warnings* and *utf* are on by default



Variable
--------

  * consistent sigils: so `@array[1]` replaces `$array[1]` and
    `%hash{'key'}` replaces `$hash{'key'}` and `%hash{'key1', 'key2'}`
    replaces `@hash{'key1', 'key2'}`
  * `$hash{'key'}` is now mostly `%hash<key>`
  * `scalar @a` becomes `+@a` (**+** forces numeric context)
  * arrays, hashes, formats, directories and filehandles are internal
    objects with procedural interfaces and can be saved in scalar variables.
  * [special variables](appendix-b-grouped.html#special-variables)
     have their own namespace (`$*VARNAME` and `$?VARNAME`),
     also token (`__LINE__`) will now be found there
  * no *Data::Dump*, use [`$var.perl.say`](appendix-a-index.html#perl) instead

Strings
-------

  * no *length*, `length(@a)` is now `elems @a` and `length $str` is `chars $str;`
  * no *ucfirst* use [**titlecase**](appendix-a-index.html#titlecase)


Operator
--------

  * `->` (arrow) becomes `.` (dot) - for method calls: object.method;
  * `=~` becomes `~~` - use regex now only with smartmatch
  * `qw( ... )` (exists still) becomes `< ... >`. With interpolation and quote protection: `<< ... >>`
  * `|` becomes `+|` - logical bit operation in numerical context
  * `&` becomes `+&`
  * `^` becomes `+^`
  * `<<` becomes `+<` - shifting numerical values
  * `>>` becomes `+>`
  * `.` becomes `~` (tilde) - for concatenate strings: 'Shinmen Musahashi: ' ~ 'Sho Rin No Sho';
  * `..` becomes `ff` - flipflop operator
  * `...` becomes `fff`
  * `cmp` becomes `leg` - `cmp` is now for general comparison, `leg` in string context
  * `? :` becomes `?? !!` - ternary operator



Flow Control
------------

  * no *foreach*, only [**for**](appendix-a-index.html#for)
  * no *each*, use [**.pairs**](appendix-a-index.html#pairs) or [**.kv**](appendix-a-index.html#kv) instead
  * no C-style *for*, use [**loop**](appendix-a-index.html#loop) instead
  * `do {...} while (...);` becomes `repeat {...} while ...;`


Else
----

  * define classes with 'class' and modules with 'module'
  * no more source filters, but macros
  * no more references, bind variables on the symbol table


New Features
============

  * new contexts: hashlist, lazy list, bool, int, num, string
  * optional typing, traits (properties of variables), binding
  * `loop` and `say` commands
  * zip, err, yadda, and pipe operators
  * hyper / reduction operators
  * chained comparison operators
  * case construct with given and when
  * junctions : `if $a == 1|2|3`
  * currying
  * smartmatch / rules (regex++, own sublanguage within the language like in Rebol)
  * named parameters for subroutines, multimethods, coroutines
  * more explicit OOP:
      * autogenerated getters/setters
      * roles (similar to Ruby's Mixins, or Java's Interfaces)
  * delegation, design by contract (Eiffel)
  * exceptions, continuations
  * macros



Native Perl 6 (new idioms)
==========================

  * no parentheses required for control expressions after `if`, `unless`, `while` ... (but still allowed)
  * `%hash<key>` instead of `%hash{'key'}`, or `%hash<< key1 key2 >>` instead of `%hash{ 'key1', 'key2' }`
  * `loop` instead of `while (1)`


Code Snippets
=============

    sub pascal { [1], -> @p { [0, @p Z+ @p, 0] } ... * };


***
