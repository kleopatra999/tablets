% Perl 6 Tablet 4 - Operators

> Perl folklore: Perl is an operator based language.

Perl 6 knows a huge amount of [*operators*](appendix-g-glossary.html#operator),
because they support 2 of the main [design goals](tablet-1-language-design.html):
they enable **dense** and **intuitive readable** code.
2 + 3 is certainly shorter and easier to understand then add(2,3),
since [pictograms](tablet-1-language-design.html.html#visual-metaphor)
can be picked up faster than words (by right brain instead of left).
(Fortran made its whole career on that).
Forwhy here are so many ops, they had to be sorted by a rule named
[*huffman coding*](tablet-1-language-design.html.html#huffman-coding).

Please make also sure you understand the important operator related terms:
[**arity**](appendix-g-glossary.html#arity) (number of operands), 
[**precedence**](appendix-g-glossary.html#precedence) (operator priority),
[**associativity**](appendix-g-glossary#associativity) (operand priority)
and [**context**](appendix-g-glossary#context).



<a id="assignment"/><a id="binding"/>

Assignment and Binding
======================

Even if technically [**=**](appendix-a-index#equal-op), [**:=**](appendix-a-index#colon-equal-op),
[**::=**](appendix-a-index#colon-colon-equal-op) and [**=:=**](appendix-a-index#equal-colon-equal-op) are operators,
they are handled on the previous (variable) tablet in the chapters
[assignment](tablet-3-variables#assignment) and [binding](tablet-3-variables#binding).
That is because they force the [*evaluation*](appendix-g-glossary#eval) of the
[*expression*](appendix-g-glossary#expression) on their right side and do something
with the result on the variable on their left side.


Comparison
==========

Equality
--------

<=>
leg
cmp
    eqv ===
    != !==
    eq ==


Smartmatch
----------

This is the most mighty (much more mighty than its backported Perl 5
twin) of all Perl 6 operators. It can be called the
"compare-this-with-that-operator". If the left side of that infix operator
matches somehow the content of the right side, it returns Bool::True,
otherwise Bool::False. The negated form !~~ naturally works the other
way around. The exact comparison operation depends on the [data
types](tablet-3-variables.html#data-types) of the values on both sides.
Just look into that [large table](appendix-b-grouped.html#smartmatch)
to check your specific case.

Smartmatching was originally invented to make [matching with
regex](tablet-9-regexes.html#matching) semantically sane.

    ~~ !~~



Ordered Set
-----------

    ++ -- succ pred

[sequence generation](#sequence-operator)


Generic Comparison
------------------

    before after cmp



Numerical Comparison
--------------------

    < == > <=> <= >=



String Comparison
-----------------

    lt eq gt leg le ge


Joined Comparison
-----------------

    3 < $a == $a < 7

is not the same as

    3 < $a < 7

because latter is evaled at once and the first in 2 steps (left to
right).

[](#junctions)



Junctions
---------

    | & ^ !
    any all one none



Ranges
------

    .. ^



Logical Selection
-----------------

    && - and
    || - or
    // - orelse
    ^^ - xor

see also [numerical selection](#numerical-selection)



Ternary
-------

    ?? !!



Flipflop
--------

    ff fff



File Test
---------

Are now ordinary methods of the IO type.

[table of all](appendix-b-grouped.html#test-methods)



yadda
-----

    ...
    ???
    !!!



Context Forcing Scalar Ops
==========================


Bool Context
------------

    ? !
    ?& ?| ?^



Numeric Context
---------------

    + - * ** / % %%
    mod exp sqrt sin cos tan log log10

### Bitflipping  ###

    +& +| +^ +< +>


### Numerical Selection ###

    min max minmax



String Context
--------------

    ~ x

    ~& ~| ~^ ~< ~>



List Ops
========


List Generation
---------------

The simplest way to create a list is by repeating some values:

    'munch' xx 3 # results in 'munch', 'munch', 'munch'
    ('hallo', 'echo') xx 2 --> 'hallo', 'echo', 'hallo', 'echo'


Range Operator

In list context the range operator produces lists:

    @ 2 .. 7 --> 2,3,4,5,6,7


Sequence Operator

    ...

[traversing sequence](#traversing-sequence)


Feed Ops
--------

    <== ==>
    <<== ==>>


Zip
---

    Z



Combinators
-----------

    X




Meta Ops
========



self assigning
--------------


negation
--------


Meta R
------


Meta S
------


Meta Z
------

    Z


Meta X
------

    X



Reduce
------

    [ ]



Triangle
--------

    [\ ]


Hyperops
--------

    « » << >>



Precedence Table
================

[is in Appendix B](appendix-b-grouped.html#table-of-precedence)




Intentionally Not Existing
==========================


 =~



Selfmade Operators
==================

How to make your own is subject [this chapter](tablet-10-metaprogramming.html#operators)
at the metaprogramming tablet.


***
