% Perl 6 Tablets Appendix G - Glossary

Short explanations to computer science terms used in the tablets.
Contains also links to syntax details, that relate to that term.

Thats why this page is also the ideal entry point for questions like:
"Can I do [*functional programming*](functional-programming) in Perl 6?"
or "What kind of [*iterators*](#iterators) are present and how they are spelled?"

<a id="nav-top"/>
**Navigation:    [A](#a) [B](#b) [C](#c) [D](#d) [E](#e)
[F](#f)  [G](#g) [H](#h) [I](#i) [J](#j) [K](#k) [L](#l)
[M](#m)  [N](#n) [O](#o) [P](#p) [Q](#q) [R](#r) [S](#s)
[T](#t)  [U](#u) [V](#v) [W](#w) [X](#x) [Y](#y) [Z](#z)**

<a id="french-greater-ö-grench-lower"/>
**»ö«** &mdash;
pure text version of [*camelia*](#camelia), the Perl 6 mascot

# [A](#nav-top)

<a id="action-method"/>
**action method** &mdash;


<a id="ALAP"/>
**ALAP** *(as late as possible)* &mdash;
within a given execution phase -
([compile time](#compile-time) or [run time](#run-time))

<a id="and"/>
**and** &mdash;
logical operation which results in [**True**](appendix-a-index.html#True) only
in case  both [*operands*](#operand) (incoming information) are also **True**,
otherwise the result is [**False**](appendix-a-index.html#True),
following [*operator*](#operator) are working under that logic:
[**&**](appendix-a-index.html#junctive-and),
[**&&**](appendix-a-index.html#logical-and),
[**+&**](appendix-a-index.html#numeric-and),
[**?&**](appendix-a-index.html#boolean-and),
[**~&**](appendix-a-index.html#string-and),
[**all**](appendix-a-index.html#all),
[**and**](appendix-a-index.html#and)
[**andthen**](appendix-a-index.html#andthen) &mdash;other operations in [*bool context*](#bool-context) are:
[*or*](#or), [*xor*](#xor), [*not*](#not)

<a id="argument"/>
**argument** &mdash;
is a specific value with which a [routine](#routine) is called at a certain time.
Not to be confused with [*parameter*](#parameter).

<a id="arity"/>
**arity** &mdash;
tells how many [*operands*](#operand) an [*operator*](#operator) needs
or how many [*parameter*](#parameter) a [*routine*](#routine) requires.
Since all *operator* are under the hood just [*methods*](#method),
these two things end up being the same in Perl 6.
You get the *arity* of a *routine* with the [*introspection*](#introspection) 
*methods* [**arity**](appendix-a-index.html#arity) (just the required) and
[**count**](appendix-a-index.html#count) (required and optional).
[*prefix*](#prefix) and [*postfix*](#postfix) operator have the *arity* of one,
[*infix*](#infix) two and the [ternary operator](#ternary-operator) has three.
See also: [*precedence*](#precedence)

<a id="array"/>
**array** &mdash;
A numbered set of informations. Any part can be accessed via an index.
It's sometimes also called [*list*](#list), even it's not the same in Perl 6.
Arrays are one of the primary container types in Perl.
See more about them in the [*var tablet*](tablet-3-variables#array).


<a id="ASAP"/>
**ASAP** *(as soon as possible)* &mdash;
within a given execution phase
([*compile time*](#compile-time) or [run time](#run-time))


<a id="ASCII"/>
**ASCII** &mdash;
short name of an american body that sets standards, but in computer science
its often synonym for a particular standard that enumerates 127 character,
95 of them are visible the rest are control character, e.g. "begin a new line",
its basically A-Z, a-z, 0-9 and some extra symbols like \$, \%, \&,
what you find on your keyboard and what an american typically needs,
to enable the rest of the world more fully there is [*unicode*](#unicode)

<a id="associativity"/>
**associativity** &mdash;
[**associativity**](appendix-b-grouped#operator-associativity)

<a id="AST"/>
**AST** *(abstract syntax tree)* &mdash;
tree like data structure, in which source code is transformed,
while [parsing](#parsing) it

<a id="attribute"/>
**attribute** &mdash;
fundamentally just a [*variable*] that belongs to an [*object*](#object)


# [B](#nav-top)

<a id="backtracking"/>
**backtracking** &mdash;
while searching for a [*regex pattern*](#regex) in a string,
perl has to keep track how far this string matched so far,
while comparing letter by letter from left to right.
Thus there have to be pointer that wander from left to right.
Backtracking refers just to the ability of this pointer to wander
back leftward a bit and try another possibility after a part of a
pattern didn't match

<a id="binding"/>
[**binding**](tablet-3-variables.html#binding) &mdash;
making two variables share the same content by pointing to same
memory location. Done in Perl 6 with 
[**:=**](appendix-a-index.html#runtime-binding-op) at [*runtime*](#runtime) and
with [**::=**](appendix-a-index.html#compiletime-binding-op) at 
[*compile time*](#compile-time).

<a id="block"/>
**block** &mdash;
syntactically just a piece of code inside curly brackets
(**{}**), when [evaluated](#evaluation) it becomes an
object of the type [**Block**](appendix-a-index.html#block-type)

<a id="bool-context"/>
**boolean context** &mdash; 
[*context*](#context)
[**Bool**](appendix-a-index.html#Bool-type)
[ops](tablet-4-operators.html#bool-context)

# [C](#nav-top)

<a id="callframe"/>
**callframe** &mdash;
A place in memory, where all information regarding the execution of a routine is stored.

<a id="camelia"/>
**camelia** &mdash;
name of the the Perl 6 mascot. She supposed to look happy,
but can also create tornados in the amazon or something like that.
Note that it has still a camel (Perl 5 mascot) inside.

<a id="capture"/>
**capture** &mdash;
is the name of a [type of storage](#Capture-type) for the [*arguments*](#argument)
of a specific [*routine*](#routine) call. When variables are used in this call
like: `chop( $text )`, then the capture works like a [*reference*](#reference)
to this variable and provides access to that variable, 
[more ...](tablet-3-variables.html#capture)


<a id="class"/>
**class** &mdash;
Named entity with (*variables*)[#variable] and (*routines*)[#routine] that serves as a blueprint
for the creation of [*objects*](#object). Each of these objects than has its own set of these variables.
Classes can inherit these variables and routines from other
classes or (*roles*)[#role] and do even much [more](tabelt-8-objects.html#classes).
They start with the keyword [**class**](appendix-a-index.html#class).


<a id="closure"/>
**closure** &mdash;
(*routines*)[#routine] whose state (content of all local variables) is
completely preserved until the next execution,
mostly used as a fancy alias for a [*block*](#block)

<a id="codepoint"/>
**codepoint** &mdash;
A [*unicode*](#unicode) primitive, represented by a specific number,
that stands for a slightly varying graphical representation.
Since you can create with *unicode* combined character like an A with an
flying pig on top, you would have 2 codepoints but only one [*grapheme*](#grapheme)

<a id="coderef"/>
**coderef** &mdash;
[*reference*] to an executable [*block*](#block) of code ([*routine*](#routine)),
in Perl 6 there are just [objects](#object) representing a routine that can be
[attributes](#attribute) of other objects

<a id="code-context"/>
**code context** &mdash;
also called callable [*context*](#context)

<a id="coercion"/>
**coercion** &mdash;

<a id="compilation"/>
**compilation** &mdash;
reading the human written source code and make it an
executable (piece of) program

<a id="compile-time"/>
**compile time** &mdash;
time when Perl converts source code to executable form (bytecode),
is always before [*run time*](#run-time)
even if code can be compiled via [**eval**](appendix-a-index.html#eval) and
[**evalfile**](appendix-a-index.html#evalfile) when the program is
already runnung, to run code at the begin of compile time use
[**BEGIN**](appendix-a-index.html#BEGIN-phaser) and
[**CHECK**](appendix-a-index.html#CHECK-phaser) to run at the end of
compile time for that unit (mostly the file or the to be **eval**ed string)

<a id="compiler"/>
**compiler** &mdash;


<a id="complex-number"/>
**complex number** &mdash;

<a id="context"/>
**context** &mdash;
Everything and hence every value is in Perl 6 an [*object*](#object) of a
certain [*type*](#type). If that *type* doesn't match the demand of the
[*operator*](#operator) it is given to, it will be converted into the demanded.
It is said that this *operator* had forced the context of a certain *type*.
Most important are the [*item context*](item-context),
[*array context*](array-context), [*numeric context*](numeric-context),
[*string context*](string-context) and [*bool context*](bool-context).
A *context* can also be forced upon a [*routine*](#routine),
when its return value has to react to the context in which it is called.

<a id="context-variable"/>
**context variable** &mdash;
name for [**$\_**](appendix-a-index.html#context-var),
which is used by built in Perl functions as an implicit
parameter and as memory of the last result

<a id="currying"/>
**currying** &mdash;
creating a [*subroutine*](routine) that calls another with certain
[*parameter*](#parameter) to be predefined


# [D](#nav-top)

<a id="declarand"/>
**declarand** &mdash;
the thing being declared, example: `$foo` in `my $foo;`,
See also: [declarator](#declarator)

<a id="declarative-programming"/>
**declarative programming** &mdash;
programming paradigm that expresses the logic of a computation
without describing its control flow

<a id="declarator"/>
**declarator** &mdash;
the command that declares to another entity that it will have a certain property
like the "my", "our", "has" ... in a declaration like `my $foo;`,
See also: [declarand](#declarand)

<a id="delegation"/>
**delegation** &mdash;
is a techtique where an [*object*](#object) has a [*method*](#method) that just
calls a *method* of one of its [*attributes*](#attribute). If the object is
a space ship which has a clock it would allow you to call `$ship.time` instead
of `$ship.clock.time`.

<a id="design-by-contract"/>
**design by contract** &mdash;
programming style in which parameters and return values from
[*routines*](#routine) must meet conditions, in Perl 6 done by
[*signatures*](#signature)

<a id="double-quoting"/>
[**double quoting**](appendix-a-index.html#double-quotes) &mdash;
means literally to surround text by double quotes which look like this: **" "**.
In opposite to [*single qouting*](single-quoting) a lot of characters inside
the quotes will not taken literally but mark things to be [*evaluated*](#evaluated).
This are [*variables*](#variable) [*routines*](#rountine) and [*blocks*](#block).
The [**qq** operator](appendix-a-index.html#qq-op) and the 
[**qqx** operator](appendix-a-index.html#qqx-op) do this too.
See also: [*qoute*](#quote)

# [E](#nav-top)

<a id="e"/>
[**e**](appendix-a-index.html#e-constant) *(euler number)* &mdash;
about 2.71828182878434, fundamental mathematical constant,
important to the functions 
[**exp**](appendix-a-index.html#exp) and [**log**](appendix-a-index.html#log),
See also: [*i*](#i), [*pi*](#pi)

<a id="encoding"/>
**encoding** &mdash; [*ASCII*](#ASCII) [*UTF-8*](#UTF-8)

<a id="escape"/>
**escape** &mdash;
means mostly just to put a [**\\**](appendix-a-index.html#escape-char)
in front of a character inside [*quotes*](#quote) or [*regexes*](#regex).
This cancels the special meaning of the character he will be taken literal.
But olso the opposite is possible. By escaping an alphabetic letter he can become
an otherwise invisible [*«control char»*](appendix-b-grouped.html#control-chars)
or an [*«escape equence»*](appendix-b-grouped.html#escape-sequences) (regex only).
[*«zero-width boundaries»*](appendix-b-grouped.html#zero-width-boundaries) are
escaped with the [pipe symbol (**|**)](appendix-a-index.html#pipe-escape),
but written only inside angle brackets (\< \>) that mark [*subrules*](#subrule),
to distinct that from the [pipe metacharacter](appendix-a-index.html#pipe-metachar).

<a id="evaluation"/>
**evaluation** &mdash;
transforming something, that it gets ready for practical usage -
sometimes means that just replacing in a piece of code all variables with there
current content, cometimes more like interpreting or compiling something;
inside quotes and [regexes](#regex) it has the first meaning,
the command [**eval**](appendix-a-index.html#eval) and
[**evalfile**](appendix-a-index.html#evalfile) does the second.

<a id="exception"/>
**exception** &mdash;

<a id="expression"/>
**expression** &mdash;
a combination of [*terms*](#term) and [*operators*](#operator)
like: `$a = $b++ - 7;`.
It can contain values, constants, variables, operators, and functions.
Each of the parts has to have a [*precedence level*](#precedence) which decides 
in which order they are considered.

# [F](#nav-top)

<a id="fat-arrow"/>
**fat arrow** &mdash;
a name for this [*operator*](#operator): 
[**=\>**](appenisdix-a-index.html#fat-arrow)

<a id="file-handle"/>
**file handle** &mdash;
is just a [*variable*](#variable) through which you can access a file.
Technically these are just [*scalars*](#scalar) holding an [*objects*](#object)
of the [*type*](#type) [**IO**](appendix-a-index.html#IO-type) which can do much
more than just read and write files.
They can access directories, [*pipes*](#pipe) the command line (shell) 
and contain also the [test methods](appendix-b-grouped.html#test-methods).
But if its just about getting the file content in on swoop or line wise,
[**slurp**](appendix-a-index.html#slurp) and 
[**lines**](appendix-a-index.html#lines) do that without a *file handle*.

<a id="functional-programming"/>
**functional programming** &mdash;
exclusively function based programming
style, [strongly supported](appendix-d-delta.html#functional-programming)
by Perl 6, considered as a branch of Declarative Programming

# [G](#nav-top)

<a id="grammar"/>
**grammar** &mdash;
special kind of [*class*](#class)

<a id="grapheme"/>
**grapheme** &mdash;
a [*unicode*](#unicode) character like a japanese kanji that may be composed
out of several [codepoints](#codepoint)

# [H](#nav-top)

<a id="hash"/>
**hash** &mdash;
[**Hash**](appendix-a-index.html#Hash-type)

<a id="hash-context"/>
**hash context** &mdash;
[*hash*](#hash) [*context*](#context)

<a id="heredoc"/>
**heredoc** &mdash; [quote](#quote)
[Tablet 2](tablet-2-basic-syntax.html#heredocs)


# [I](#nav-top)

<a id="i"/>
[**i**](appendix-a-index.html#i-constant) *(imaginary number)* &mdash;
square root of -1, fundamental mathematical constant to build 
[*complex number*](#complex-number), displayed as `0+1i`
important to the functions ,
See also: [*e*](#e), [*pi*](#pi)

<a id="infix"/>
**infix** &mdash;

<a id="inheritance"/>
**inheritance** &mdash;

<a id="instance"/>
**instance** &mdash;

<a id="interpolation"/>
**interpolation** &mdash;

<a id="introspection"/>
**introspection** &mdash;

<a id="invocant"/>
**invocant** &mdash;
[*routine*](#routine) or [statement](#statement) that called the piece
of code of issue

<a id="item-context"/>
**scalar context** &mdash;
is a [*context*](#context) of the [Scalar type](appendix-a-index.html#Scalar-type),
is called in Perl 5 [scalar context](#scalar-context)

<a id="iteration"/>
**iteration** &mdash;
is a repeated executing of a term or [*block*](#block),
enforced by [*iterators*](#iterator). 
Sometimes its meant as a specific repetition.

<a id="iterator"/>
**iterator** &mdash; [iterators](appendix-b-grouped.html#loops)

# [J](#nav-top)

<a id="junction"/>
[**junction**](tablet-4-operators.html#Junctions) &mdash;
a [type of value](appendix-a-index.html#Junction-type) that holds a logical
combination of several values,like: (A and B) or C, 
create them with [junctive ops](appendix-b-grouped.html#junctions)

# [K](#nav-top)

# [L](#nav-top)

<a id="lazy"/>
**lazy** &mdash;

<a id="lexer"/>
**lexer** &mdash;

<a id="lexical-scope"/>
**lexical scope** &mdash;

<a id="list"/>
**list** &mdash;

<a id="list-context"/>
**list context** &mdash; 
[**Array**](appendix-a-index.html#Array-type)
[*context*](#context)

<a id="list-flattening"/>
**list flattening** &mdash;


<a id="LOL"/>
**LOL** *(List of List)* &mdash;
[special type](appendix-a-index.html#LoL) of [*list*](#list) that can contain
other lists, like: `[[1,2,3], [4,5,6]]` which is a list with 2 elements

<a id="lol-context"/>
**lol context** &mdash;
[**lol**](appendix-a-index.html#lol) [*context*](#context) means these sublists
(as explained in [*LOL*](#LOL)) will not [*flattened*](#list-flattening)

<a id="LTM"/>
**LTM** *(longest token matching)* &mdash;
when searching a pattern with alternatives (sub|substr)
the search will continue after finding the pattern 'sub'
because of looking for the longest alternative

<a id="lvalue"/>
**lvalue** &mdash;


# [M](#nav-top)

<a id="metaoperator"/>
[**metaoperator**](appendix-b-grouped.html#metaoperators) &mdash;
operator that alters the meaning or expands the scope of another normal operator,
[a listing of them](appendix-b-grouped.html#metaoperators)

<a id="metaprogramming"/>
**metaprogramming** &mdash; 

<a id="method"/>
**method** &mdash;
is a [*routine*] that belongs to a [*object*](#object) or a class

<a id="MMD"/>
**MMD** *(multimethod dispatch)* &mdash;
technique where several [*routines*](#routine) can have the same name,
but different [*signatures*](#signature), when the name is called - the
suitable routine is seleted via *MMD* &mdash;
See also: [**multi**](appendix-a-index.html#multi)

<a id="moar"/>
**moar** &mdash;


# [N](#nav-top)

<a id="named-capure"/>
**named capure** &mdash;

<a id="named-parameter"/>
**named parameter** &mdash; 
[*parameter*](#parameter)

<a id="namespace"/>
**namespace** &mdash;


<a id="niecza"/>
**niecza** &mdash;


<a id="not"/>
**not** &mdash;
logical operation that changes a true into false and vice versa,
following operator working under that logic:
[**!()**](appendix-a-index.html#negation-op),
[**not**](appendix-a-index.html#not) &mdash;
other operations in [*bool context*](#bool-context) are:
[*and*](#and), [*or*](#or), [*xor*](#xor) 

<a id="numeric-context"/>
**numeric context** &mdash; 
[**Num**](appendix-a-index.html#Num-type)
[*type*](#type)
[*context*](#context)

# [O](#nav-top)

<a id="object"/>
**object** &mdash; [*OOP*](#OOP)

<a id="OOP"/>
**OOP** *(object oriented orogramming)* &mdash;
programming paradigm (style), that in which functions ([*routines*](#routine))
are combined with the data the operate on to so called [*objects*](#object).

<a id="operand"/>
**operand** &mdash;

<a id="operator"/>
**operator** &mdash;

<a id="or"/>
**or** &mdash;
logical operation that has a the result [**True**](appendix-a-index.html#True)
if at least one of two [*operands*](#operand) (incoming information) is also **True**,
otherwise the result is [**False**](appendix-a-index.html#False). 
Following operator working under that logic:
[**|**](appendix-a-index.html#junctive-or),
[**||**](appendix-a-index.html#logical-or),
[**//**](appendix-a-index.html#defined-or),
[**+|**](appendix-a-index.html#numeric-or),
[**?|**](appendix-a-index.html#boolean-or),
[**~|**](appendix-a-index.html#string-or),
[**any**](appendix-a-index.html#any),
[**or**](appendix-a-index.html#or)
[**orelse**](appendix-a-index.html#orelse),
[**err**](appendix-a-index.html#err) &mdash;
other operations in [*bool context*](#bool-context) are:
[**and**](#and), [**xor**](#xor), [**not**](#not)


# [P](#nav-top)

<a id="parameter"/>
**parameter** &mdash;
a slot for an [argument](#argument) that a [*routine*](#routine) accepts,
it usually has a [*type*](#type) that sets limits what values are acceptable,
there are *required parameter*, *optional parameter*,
[*positional parameter*](#positional-parameter) and [named parameter](#named-parameter),
sum of all parameters is called [*signature*](#signature) &mdash; 
example: `sub sum (Num $summand1, Num $summand2) { return $summand1 + $summand2 }`
later: `$s = sum(3, 4);`, \$summand1 and \$summand2 are parameter of sum,
the values 3 and 4 were the arguments of the specific call of sum

<a id="parrot"/>
**parrot** &mdash;


<a id="parsetree"/>
**parsetree** &mdash;
hierarchical data representing the logical structure of a program,
also called [*AST*](#AST)

<a id="parsing"/>
**parsing** &mdash;

<a id="phaser"/>
[**phaser**](appendix-b-grouped.html#closure-traits) &mdash;
Perl 6 term for specially named (due a prefix statement) subblocks withe special
[*runtimes*](#run-time) aka [*closure traits*](appendix-b-grouped#closure-traits) &mdash;
example: [**BEGIN**](appendix-a-index.html#BEGIN-phaser)


<a id="perlito"/>
**perlito** &mdash;


<a id="pi"/>
[**pi**](appendix-a-index.html#pi-constant) *(π)* &mdash;
about 3.14159265394248, fundamental mathematical constant,
ratio of a circle's circumference to its diameter
important to the functions,
See also: [*e*](#e), [*i*](#i)

<a id="pipe"/>
**pipe** &mdash;
connection between 2 processes, move data (mostly only in one direction)
without buffering, can also mean just the connection of several commands via 
[**==\>**](appendix-a-index.html#equal-equal-greater-op) and alike

<a id="POD"/>
[**POD**](tablet-2-basic-syntax.html#pod)
*(Plain Old Documentation)* &mdash;
a markup language to embeded documentation into Perl source code,
has in Perl 6 the ability to store data into special variables 
like [**\$=pod**](appendix-a-index.html#pod-pod-var) to be retrieved later,
all pod-directives start with a equal sign - more details are written in the
[basics tablet](tablet-2-basic-syntax.html#pod)

<a id="pointy-block"/>
**pointy block** &mdash;
a block that is given readonly [*parameters*](parameter) with
[**-\>**](appendix-a-index.html#arrow-op) or rw parameters with
[**<-\>**](appendix-a-index.html#lower-minus-greater-op)

<a id="positional-parameter"/>
**positional parameter** &mdash; 
[*parameter*](#parameter)

<a id="postfix"/>
**postfix** &mdash;

<a id="precedence"/>
**precedence** &mdash;
If an [*expression*](#expression) contains several [*operators*](#operator),
they will applied in the order according to the
[**table of precedence**](appendix-b-grouped.html#table-of-precedence) from the
highest to the lowest level.
See also: [*arity*](#arity)

<a id="prefix"/>
**prefix** &mdash;

<a id="property"/>
**property** &mdash;
metadata of a variable set at [run time](#run-time)

<a id="pugs"/>
**pugs** &mdash;



# [Q](#nav-top)


<a id="quasiquoting"/>
[**quasiquoting**](appendix-a-index.html#quasi) &mdash;
differs a bit from normal [*quoting*](#quote) operations and has thatswhy its
own [*slang*](#slang) variable [**$~Quasi**](appendix-a-index.html#Quasi-slang-var).
It means to embrace a piece of code that will be [*compiled*](#compilation)
but the result will be just the [*AST*](#AST).

<a id="quote-protection"/>
**quote protection** &mdash;
Perl 5 and 6 have the nice [**qw**](appendix-a-index.html#qw-op) operator,
thats splits a string into words according to the whitespace between words,
if you wish a word to contain whitespace, you have to put it in quotes:
`<<these are "three words">>`, this mechanism is called quote protection
and is provided by the adverb [**:ww**](appendix-a-index.html#ww-adverb)
aka [**:quotewords**](appendix-a-index.html#quotewords-adverb) which is included
in [**\<\< \>\>**](appendix-a-index.html#double-angle-brackets-op),
the adverb [**:w**](appendix-a-index.html#w-adverb) aka
[**:words**](appendix-a-index.html#words-adverb) which support **qw** as well as
[**< >**](appendix-a-index.html#angle-brackets-op) don't provide this service,
that might also be known to shell users: `<these are 'four words'>`


<a id="quote"/>
**quote** &mdash;
Ri *quote* means to encompass text by character like quoting marks ('' or ""). 
This text will be processed and then counted as one value of the [*type*](#type)
[**Str**](appendix-a-index.html#Str-type). The rules ([*grammar*](#grammar))
of this process are stored in [**$~Quote**](appendix-a-index.html#Quote-slang-var).
See also:
[*single quoting*](#single quoting), [*double quoting*](#double quoting)
[*heredocs*](#heredocs),             [*quasiquoting*](#quasiquoting)


# [R](#nav-top)

<a id="radian"/>
**radian** &mdash;

<a id="range"/>
**range** &mdash;


<a id="rakudo"/>
**rakudo** &mdash;


<a id="reference"/>
**reference** *(or pointer)* &mdash;
address of or pointer to a specific location in the computers memory.
Officially there are no references in Perl 6, 
but there are several container types that can hold other container of values,
and there is [binding](#binding).

<a id="regex"/>
**regex** *(regular expression)* &mdash;
in Perl 5 its a pattern matching notation,
in Perl 6 a whole rearranged language that does the same,
a [whole page](tablet-9-regexes.html) is dedicated just about that subject

<a id="reify">
**reify** &mdash;
Since [*lists*](#list) are per default [*lazy*](#lazy) in Perl 6,
it is possible that not all elements are known yet explicitly.
However there is an internal pointer up to which element they are known,
plus the internal command *reify* to compute the next element.

<a id="role"/>
**role** &mdash;
is just a group of [*methods*](#method) and [*attributes*](#attribue) that can be
added to or removed from an [*object*](#object) or [*class*](#class) at any time. 
Before adding there will be a check at [*runtime*](#runtime) if it overwrites
an already existing *method* or a needed *attribute* exists.
In case of violation an [*exception*](#exception) will be raised.
And a *role* can't be [*instantiated*](#instance) nor [*inherited*](#inheritance)
from like from a *class*.
The keyword [**role**](appendix-a-index.html#role) [*declares*](#declarator)
the following [*block*](#block) to be a role.

<a id="routine"/>
**routine** &mdash;
[block](#block) of code callable by name.
It can have a [*signature*](#signature) and a return value.
When the *routine* is [compiled](#compilation) it becomes an object of the
[*type*](#type) [**SoftRoutine**](appendix-a-index.html#softroutine-type)
or [**HardRoutine**](appendix-a-index.html#hardroutine-type).

<a id="run-time"/>
**run time** &mdash;
time when execution hits a certain part of the program,
after [*compile time*](#compile-time).


# [S](#nav-top)

<a id="scalar"/>
**scalar** &mdash; 
container type for a single value which can be practically every value,
incluing any container. [Scalar variables](tablet-3-variables.html#scalar)
have the [sigil](#sigil) [**$**](appendix-a-index.html#dollar-sigil).

<a id="scalar-context"/>
**scalar context** &mdash;
is called in P6 [*item context*](#item-context).

<a id="scope"/>
**scope** &mdash;
area within which an identifier 
([*symbol*](#symbol) like a [*variable*](#variable) or [*routine*](#routine))
is usable. It is normally the current surrounding [*block*](#block)
or (if there is none) the current file.

<a id="sigil"/>
**sigil** &mdash;
Character that serves as a [*prefix*](#prefix) to categorize the following name
([*symbol*](#symbol)). It stays in front of the actual name without spacing.
Most prominent in Perl are the variable [sigils](appendix-b-grouped.html#sigils):
[**$**](appendix-a-index.html#dollar-sigil),
[**@**](appendix-a-index.html#at-sigil) and
[**%**](appendix-a-index.html#percent-sigil).
They mark the three different variable [*namespaces*](#namespace)
([*scalar*](#scalar), [*array*](#array) and [*hash*](#hash)) and make
[*interpolation*](#interpolation) much easier for human and the computer.
Perl 6 knows also [*secondary sigils*](#twigil).
For more info see the [variable tablet](tablet-3-variables.html).

<a id="signature"/>
**signature** &mdash;
definition of a [*routines*](#routine) [*parameters*](#parameter)
(left-hand side of a binding), surrounded by round parentheses

<a id="single-quoting"/>
[**single quoting**](appendix-a-index.html#single-quotes) &mdash;
means to surround text by single quotes which look like this: **' '**.
Every sign in this text will be understood literally, except **\\** and **\'**,
which result in **\** and **'**.
The [**q** operator](appendix-a-index.html#q-op) and the 
[**qx** operator](appendix-a-index.html#qx-op) do the same thing.
See also: [*double qouting*](#double-quoting) and [*qoute*](#quote).

<a id="slang"/>
**slang** &mdash;
Perl 6 is a family of languages containing the the main language,
[*quote*](#quote), [*regular expressions*](#regular expression) and more.
These sublanguages are called in short slangs.
Each slang has a completely independent set of rules (a [*grammar*](#grammar))
which is stored in a [slang variable](appendix-b-grouped.html#slang-variables).
The slang variables have the [*twigil*](#twigil) **\~** like in 
[**\$\~MAIN**](appendix-a-index.html#MAIN-lang-var) (main language).
You can change or alter them by using the keywords 
[**augment**](appendix-a-index.html#augment) and
[**supersede**](appendix-a-index.html#supersede).

<a id="slice"/>
**slice** &mdash;
part of an [*array*](#array) or [*list*](#list)

<a id="slurpy-array"/>
**slurpy array** &mdash;
array [*parameter*](#parameter) that receives (slurps) all remaining 
[*arguments*](#argument) as one [*list*](#list)

<a id="smartmatch"/>
**smartmatch** &mdash;
The original Perl 6 *smartmatch* [*operator*](#operator) looks like this:
[**~~**](appendix-a-index.html#smartmatch-op) and does an universal "compare
this with that" dependend on the [*types*](#type) of the [*operands*](#operand).
That can range from simple comparison of two values to applying a [*regex*](#regex)
up to the question if two [*signatures*](#signature) are compatible -
all details in [that table](appendix-b-grouped.html#smartmatch).

<a id="statement"/>
**statement** &mdash;
smallest standalone element of a program that can be executed,
divided by [*terminators*](#terminator).
Everything smaller is just a [*term*](#term).

<a id="string"/>
**string** &mdash; 
[Str](appendix-a-index.html#Str-type)

<a id="string-context"/>
**string context** &mdash; 
[*context*](#context)
[**Str**](appendix-a-index.html#Str-type)
[ops](tablet-4-operators.html#string-context)

<a id="subroutine"/>
**subroutine** &mdash;
Perl 5-ish term for [routine](#routine) because in Perl 5 there is only the
*sub* command to build a callable block,
but in Perl 6 there are [much more types](#Routine-types) hence the name change

<a id="subrule"/>
**subrule** &mdash;
piece of a [*regular expression*](#regex) that has a name,
its findings are stored under that name,
some of them were used so often, that their built into to language as
[predefined subrules](appendix-b-grouped.html#subrules)

<a id="suffix"/>
**suffix** &mdash;
another word for [*postfix*](#postfix)


<a id="symbol"/>
**symbol** &mdash;


<a id="symbol-table"/>
**symbol table** &mdash;


# [T](#nav-top)

<a id="term"/>
**term** &mdash;
a syntax "atom" like a pair of brackets, an [operator](#operator) or a value(4.32),
not to be confused with [*expression*](#expression)

<a id="terminator"/>
**terminator** &mdash;
character that marks the end of a [*statement*](#statement), these are 
[**;**](appendix-a-index.html#semicolon-terminator) and
[**}**](appendix-a-index.html#curly-brackets-terminator),
[more about statements](tablet-2-basic-syntax.html#statements)

<a id="ternary-operator"/>
**ternary operator** &mdash;
or *conditional operator* is the name of this construct:
[**?? !!**](appendix-a-index.html#ternary-op). 
It is a shortcut for [**if**](appendix-a-index.html#if) and
[**else**](appendix-a-index.html#else) which was introduced by the C language
as *? :* as it is still written in Perl 5.
Its useful if every alternative consists only of one [*term*](#term).
Its even more handy if you have to feed a variable with the result of the
winning alternative ([more details](tablet-4-operators.html#ternary)). 
The name comes from the latin word for "one third" (tertiarium), 
because its the only [*operator*](#operator) with that [*arity*](#arity),
hence it has three [*operands*](#operand).

<a id="test-method"/>
**test method** &mdash;
[test methods](appendix-b-grouped.html#test-methods).

<a id="topicalizer"/>
**topicalizer** &mdash;
every keyword that sets content of the context variable
([**$\_**](appendix-a-index.html#context-var)),
like [**given**](appendix-a-index.html#given) and [**for**](appendix-a-index.html#for)

<a id="trait"/>
**trait** &mdash;
additional property of a variable, defined at [*compile time*](#compile-time),
see [**but**](appendix-a-index.html#but), what other languages call
*trait* Perl calls [role](#role)

<a id="transliteration"/>
**transliteration** &mdash;
[**$~Trans**](appendix-a-index.html#Quasi-slang-var),
[**:trans**](appendix-a-index.html#trans-adverb),
[**.trans**](appendix-a-index.html#trans),
[**tr** ///](appendix-a-index.html#tr-op)

<a id="twigil"/>
[**twigil**](appendix-b-grouped.html#twigils) &mdash;
second(ary) [*sigil*](#sigil) indicating a special property of a variable,
[(more details here)](tablet-3-variables.html#twigils)

<a id="type"/>
**type** &mdash;

<a id="type-constraint"/>
**type constraint** &mdash;

# [U](#nav-top)

<a id="unicode"/>
**unicode** &mdash;
format to save text in, that can contain almost any letter or symbol known to men,
not just [*ASCII*](#ASCII), its [fully supported](appendix-d-delta.html#unicode)
by Perl 6, which means any part of a a program might use any character or symbol,
strange names that start with UTF are most probably Unicode formats

<a id="UTF-8"/>
**UTF-8** &mdash;


# [V](#nav-top)

<a id="value"/>
**value** &mdash;

<a id="variable"/>
**variable** &mdash;


<a id="virtual-machine"/>
**Virtual Machine** (VM) &mdash;


# [W](#nav-top)

# [X](#nav-top)

<a id="xor"/>
**xor** *(eXclusive OR)* &mdash;
logical operation that has a the result **True** if only one of two
[*operands*](#operand) (incoming information) is also true,
otherwise result is **False**. Following operator working under that logic:
[**\^**](appendix-a-index.html#junctive-xor),
[**\^\^**](appendix-a-index.html#logical-xor),
[**+\^**](appendix-a-index.html#numeric-xor),
[**?\^**](appendix-a-index.html#boolean-xor),
[**~\^**](appendix-a-index.html#string-xor),
[**one**](appendix-a-index.html#one),
[**xor**](appendix-a-index.html#xor) &mdash;
other operations in [*bool context*](#bool-context) are:
[*and*](#and), [*or*](#or), [*not*](#not)


# [Y](#nav-top)

<a id="yadda-operator"/>
[**yadda operator**](tablet-4-operators.html#yadda) &mdash; 
placeholder for later to be written code inside a [routine](#routine) body.
Comes in 3 flavours, depending what should be triggered:
[**...**](appendix-a-index.html#dot-yadda-op) ([**fail**](appendix-a-index.html#fail)),
[**???**](appendix-a-index.html#question-mark) ([**warn**](appendix-a-index.html#warn)) and
[**!!!**](appendix-a-index.html#exclamation-mark) ([**die**](appendix-a-index.html#die))

# [Z](#nav-top)

***
